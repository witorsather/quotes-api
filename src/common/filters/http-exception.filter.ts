import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { Request, Response } from 'express';

@Catch()
export class AllExceptionsFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();

    const status =
      exception instanceof HttpException
        ? exception.getStatus()
        : HttpStatus.INTERNAL_SERVER_ERROR;

    const message =
      exception instanceof HttpException
        ? exception.getResponse()
        : 'Esse √© um erro interno do servidor, por gentileza, tente mais tarde.';

    console.error('üî• [ExceptionFilter] Erro capturado:', exception);

    response.status(status).json({
      success: false,
      statusCode: status,
      message,
      path: request.url,
      timestamp: new Date().toISOString(),
    });
  }
}
// // ‚úÖ O filtro de exce√ß√£o AllExceptionsFilter captura todas as exce√ß√µes n√£o tratadas no aplicativo NestJS e formata a resposta de erro de maneira consistente. Ele registra o erro no console e envia uma resposta JSON ao cliente com detalhes sobre o erro, incluindo o c√≥digo de status HTTP, a mensagem de erro e o caminho da solicita√ß√£o. Isso ajuda a depurar problemas e fornece feedback √∫til ao cliente em caso de falhas.
// // ‚úÖ O filtro de exce√ß√£o AllExceptionsFilter √© √∫til para capturar e tratar erros de forma centralizada em uma aplica√ß√£o NestJS, permitindo que voc√™ forne√ßa respostas consistentes e informativas para os clientes em caso de falhas. Ele tamb√©m ajuda a registrar erros no console para facilitar a depura√ß√£o durante o desenvolvimento.